
Timer.c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000032e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b7  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f4  00000000  00000000  00000db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043e  00000000  00000000  000014a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  000018e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c1  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a8  00000000  00000000  00001ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002179  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_10>
  2c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  74:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <fun>:
#include "timer.h"


void fun(void){
	
	PORTA=0x01 ;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	80 e7       	ldi	r24, 0x70	; 112
  84:	92 e0       	ldi	r25, 0x02	; 2
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <fun+0xa>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <fun+0x14>
  90:	00 00       	nop
	_delay_ms(100);
	PORTA=0x00;
  92:	1b ba       	out	0x1b, r1	; 27
  94:	08 95       	ret

00000096 <main>:
}


int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0x6>
  9c:	00 d0       	rcall	.+0      	; 0x9e <main+0x8>
  9e:	1f 92       	push	r1
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
	DDRA=0xff;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8a bb       	out	0x1a, r24	; 26
	TIMER_CONFG f ;
	f.TIMER_MODE=NORMAL ;
  a8:	19 82       	std	Y+1, r1	; 0x01
	f.PRESCALERS=PRESCALER_1024 ;
  aa:	85 e0       	ldi	r24, 0x05	; 5
  ac:	8a 83       	std	Y+2, r24	; 0x02
	TIMER_INTERRUPT_CHECK d ;
	init_timer0(0x20,&f);
  ae:	be 01       	movw	r22, r28
  b0:	6f 5f       	subi	r22, 0xFF	; 255
  b2:	7f 4f       	sbci	r23, 0xFF	; 255
  b4:	80 e2       	ldi	r24, 0x20	; 32
  b6:	0e 94 68 00 	call	0xd0	; 0xd0 <init_timer0>
	d.fun_ptr=&fun ;
  ba:	8e e3       	ldi	r24, 0x3E	; 62
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	9d 83       	std	Y+5, r25	; 0x05
  c0:	8c 83       	std	Y+4, r24	; 0x04
	d.INTERRUPT_ENABLE=OVERVLOW_INTERRUPT ;
  c2:	1b 82       	std	Y+3, r1	; 0x03
	interrupt_timers(&d);
  c4:	ce 01       	movw	r24, r28
  c6:	03 96       	adiw	r24, 0x03	; 3
  c8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <interrupt_timers>
    sei();
  cc:	78 94       	sei
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x38>

000000d0 <init_timer0>:
void (*interrupt_overflow)(void) ;
void (*inrterrupt_output_capture)(void);

void init_timer0(uint8 val, TIMER_CONFG *obj){
	
	if(obj->TIMER_MODE==NORMAL){
  d0:	fb 01       	movw	r30, r22
  d2:	90 81       	ld	r25, Z
  d4:	91 11       	cpse	r25, r1
  d6:	08 c0       	rjmp	.+16     	; 0xe8 <init_timer0+0x18>
		clr_pin(3,BASE_TIMER_0+time_control_0);
  d8:	95 b5       	in	r25, 0x25	; 37
  da:	97 7f       	andi	r25, 0xF7	; 247
  dc:	95 bd       	out	0x25, r25	; 37
		clr_pin(6,BASE_TIMER_0+time_control_0);
  de:	95 b5       	in	r25, 0x25	; 37
  e0:	9f 7b       	andi	r25, 0xBF	; 191
  e2:	95 bd       	out	0x25, r25	; 37
		hw_wr_port(BASE_TIMER_0+time_counter_0,val);
  e4:	84 bd       	out	0x24, r24	; 36
  e6:	1c c0       	rjmp	.+56     	; 0x120 <init_timer0+0x50>
	}
	else if(obj->TIMER_MODE==CTC){
  e8:	91 30       	cpi	r25, 0x01	; 1
  ea:	49 f4       	brne	.+18     	; 0xfe <init_timer0+0x2e>
		set_pin(3,BASE_TIMER_0+time_control_0);
  ec:	95 b5       	in	r25, 0x25	; 37
  ee:	98 60       	ori	r25, 0x08	; 8
  f0:	95 bd       	out	0x25, r25	; 37
		clr_pin(6,BASE_TIMER_0+time_control_0);
  f2:	95 b5       	in	r25, 0x25	; 37
  f4:	9f 7b       	andi	r25, 0xBF	; 191
  f6:	95 bd       	out	0x25, r25	; 37
		clr_port(BASE_TIMER_0+time_counter_0);
  f8:	14 bc       	out	0x24, r1	; 36
		hw_wr_port(BASE_TIMER_0+time_output_capture_0,val);
  fa:	83 bd       	out	0x23, r24	; 35
  fc:	11 c0       	rjmp	.+34     	; 0x120 <init_timer0+0x50>
	}
	
	else if(obj->TIMER_MODE==PWM){
  fe:	92 30       	cpi	r25, 0x02	; 2
 100:	39 f4       	brne	.+14     	; 0x110 <init_timer0+0x40>
			clr_pin(3,BASE_TIMER_0+time_control_0);
 102:	85 b5       	in	r24, 0x25	; 37
 104:	87 7f       	andi	r24, 0xF7	; 247
 106:	85 bd       	out	0x25, r24	; 37
			set_pin(6,BASE_TIMER_0+time_control_0);
 108:	85 b5       	in	r24, 0x25	; 37
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	85 bd       	out	0x25, r24	; 37
 10e:	08 c0       	rjmp	.+16     	; 0x120 <init_timer0+0x50>
	}
	else if(obj->TIMER_MODE==FAST_PWM){
 110:	93 30       	cpi	r25, 0x03	; 3
 112:	31 f4       	brne	.+12     	; 0x120 <init_timer0+0x50>
			set_pin(3,BASE_TIMER_0+time_control_0);
 114:	85 b5       	in	r24, 0x25	; 37
 116:	88 60       	ori	r24, 0x08	; 8
 118:	85 bd       	out	0x25, r24	; 37
			set_pin(6,BASE_TIMER_0+time_control_0);
 11a:	85 b5       	in	r24, 0x25	; 37
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	85 bd       	out	0x25, r24	; 37
		}	
	
	
	if (obj->PRESCALERS==NO_CLK_SOURCE)
 120:	fb 01       	movw	r30, r22
 122:	81 81       	ldd	r24, Z+1	; 0x01
 124:	81 11       	cpse	r24, r1
 126:	0a c0       	rjmp	.+20     	; 0x13c <init_timer0+0x6c>
	{
	clr_pin(0,BASE_TIMER_0+time_control_0);
 128:	85 b5       	in	r24, 0x25	; 37
 12a:	8e 7f       	andi	r24, 0xFE	; 254
 12c:	85 bd       	out	0x25, r24	; 37
	clr_pin(1,BASE_TIMER_0+time_control_0);
 12e:	85 b5       	in	r24, 0x25	; 37
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	85 bd       	out	0x25, r24	; 37
	clr_pin(2,BASE_TIMER_0+time_control_0);
 134:	85 b5       	in	r24, 0x25	; 37
 136:	8b 7f       	andi	r24, 0xFB	; 251
 138:	85 bd       	out	0x25, r24	; 37
 13a:	08 95       	ret
	}
	
		else if (obj->PRESCALERS==NO_PRESCALER)
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	51 f4       	brne	.+20     	; 0x154 <init_timer0+0x84>
		{
			set_pin(0,BASE_TIMER_0+time_control_0);
 140:	85 b5       	in	r24, 0x25	; 37
 142:	81 60       	ori	r24, 0x01	; 1
 144:	85 bd       	out	0x25, r24	; 37
			clr_pin(1,BASE_TIMER_0+time_control_0);
 146:	85 b5       	in	r24, 0x25	; 37
 148:	8d 7f       	andi	r24, 0xFD	; 253
 14a:	85 bd       	out	0x25, r24	; 37
			clr_pin(2,BASE_TIMER_0+time_control_0);
 14c:	85 b5       	in	r24, 0x25	; 37
 14e:	8b 7f       	andi	r24, 0xFB	; 251
 150:	85 bd       	out	0x25, r24	; 37
 152:	08 95       	ret
		}
		else if (obj->PRESCALERS==PRESCALER_8)
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	51 f4       	brne	.+20     	; 0x16c <init_timer0+0x9c>
			{
				clr_pin(0,BASE_TIMER_0+time_control_0);
 158:	85 b5       	in	r24, 0x25	; 37
 15a:	8e 7f       	andi	r24, 0xFE	; 254
 15c:	85 bd       	out	0x25, r24	; 37
				set_pin(1,BASE_TIMER_0+time_control_0);
 15e:	85 b5       	in	r24, 0x25	; 37
 160:	82 60       	ori	r24, 0x02	; 2
 162:	85 bd       	out	0x25, r24	; 37
				clr_pin(2,BASE_TIMER_0+time_control_0);
 164:	85 b5       	in	r24, 0x25	; 37
 166:	8b 7f       	andi	r24, 0xFB	; 251
 168:	85 bd       	out	0x25, r24	; 37
 16a:	08 95       	ret
			}
			
		else if (obj->PRESCALERS==PRESCALER_64)
 16c:	83 30       	cpi	r24, 0x03	; 3
 16e:	51 f4       	brne	.+20     	; 0x184 <init_timer0+0xb4>
				{
					set_pin(0,BASE_TIMER_0+time_control_0);
 170:	85 b5       	in	r24, 0x25	; 37
 172:	81 60       	ori	r24, 0x01	; 1
 174:	85 bd       	out	0x25, r24	; 37
					set_pin(1,BASE_TIMER_0+time_control_0);
 176:	85 b5       	in	r24, 0x25	; 37
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	85 bd       	out	0x25, r24	; 37
					clr_pin(2,BASE_TIMER_0+time_control_0);
 17c:	85 b5       	in	r24, 0x25	; 37
 17e:	8b 7f       	andi	r24, 0xFB	; 251
 180:	85 bd       	out	0x25, r24	; 37
 182:	08 95       	ret
				}
				
			else if (obj->PRESCALERS==PRESCALER_256)
 184:	84 30       	cpi	r24, 0x04	; 4
 186:	51 f4       	brne	.+20     	; 0x19c <init_timer0+0xcc>
			{
				clr_pin(0,BASE_TIMER_0+time_control_0);
 188:	85 b5       	in	r24, 0x25	; 37
 18a:	8e 7f       	andi	r24, 0xFE	; 254
 18c:	85 bd       	out	0x25, r24	; 37
				clr_pin(1,BASE_TIMER_0+time_control_0);
 18e:	85 b5       	in	r24, 0x25	; 37
 190:	8d 7f       	andi	r24, 0xFD	; 253
 192:	85 bd       	out	0x25, r24	; 37
				set_pin(2,BASE_TIMER_0+time_control_0);
 194:	85 b5       	in	r24, 0x25	; 37
 196:	84 60       	ori	r24, 0x04	; 4
 198:	85 bd       	out	0x25, r24	; 37
 19a:	08 95       	ret
			}
		
		else if (obj->PRESCALERS==PRESCALER_1024)
 19c:	85 30       	cpi	r24, 0x05	; 5
 19e:	51 f4       	brne	.+20     	; 0x1b4 <init_timer0+0xe4>
		{
			set_pin(0,BASE_TIMER_0+time_control_0);
 1a0:	85 b5       	in	r24, 0x25	; 37
 1a2:	81 60       	ori	r24, 0x01	; 1
 1a4:	85 bd       	out	0x25, r24	; 37
			clr_pin(1,BASE_TIMER_0+time_control_0);
 1a6:	85 b5       	in	r24, 0x25	; 37
 1a8:	8d 7f       	andi	r24, 0xFD	; 253
 1aa:	85 bd       	out	0x25, r24	; 37
			set_pin(2,BASE_TIMER_0+time_control_0);
 1ac:	85 b5       	in	r24, 0x25	; 37
 1ae:	84 60       	ori	r24, 0x04	; 4
 1b0:	85 bd       	out	0x25, r24	; 37
 1b2:	08 95       	ret
		}
		
		else if (obj->PRESCALERS==EXTERNAL_CLK_FALL_EDGE)
 1b4:	86 30       	cpi	r24, 0x06	; 6
 1b6:	51 f4       	brne	.+20     	; 0x1cc <init_timer0+0xfc>
		{
			clr_pin(0,BASE_TIMER_0+time_control_0);
 1b8:	85 b5       	in	r24, 0x25	; 37
 1ba:	8e 7f       	andi	r24, 0xFE	; 254
 1bc:	85 bd       	out	0x25, r24	; 37
			set_pin(1,BASE_TIMER_0+time_control_0);
 1be:	85 b5       	in	r24, 0x25	; 37
 1c0:	82 60       	ori	r24, 0x02	; 2
 1c2:	85 bd       	out	0x25, r24	; 37
			set_pin(2,BASE_TIMER_0+time_control_0);
 1c4:	85 b5       	in	r24, 0x25	; 37
 1c6:	84 60       	ori	r24, 0x04	; 4
 1c8:	85 bd       	out	0x25, r24	; 37
 1ca:	08 95       	ret
		}
		
		else if (obj->PRESCALERS==EXTERNAL_CLK_RAISE_EDGE)
 1cc:	87 30       	cpi	r24, 0x07	; 7
 1ce:	49 f4       	brne	.+18     	; 0x1e2 <init_timer0+0x112>
		{
			set_pin(0,BASE_TIMER_0+time_control_0);
 1d0:	85 b5       	in	r24, 0x25	; 37
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	85 bd       	out	0x25, r24	; 37
			set_pin(1,BASE_TIMER_0+time_control_0);
 1d6:	85 b5       	in	r24, 0x25	; 37
 1d8:	82 60       	ori	r24, 0x02	; 2
 1da:	85 bd       	out	0x25, r24	; 37
			set_pin(2,BASE_TIMER_0+time_control_0);
 1dc:	85 b5       	in	r24, 0x25	; 37
 1de:	84 60       	ori	r24, 0x04	; 4
 1e0:	85 bd       	out	0x25, r24	; 37
 1e2:	08 95       	ret

000001e4 <interrupt_timers>:

							
}

void interrupt_timers(TIMER_INTERRUPT_CHECK *j){
	if (j->INTERRUPT_ENABLE==OVERVLOW_INTERRUPT)
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 81       	ld	r18, Z
 1e8:	21 11       	cpse	r18, r1
 1ea:	0a c0       	rjmp	.+20     	; 0x200 <interrupt_timers+0x1c>
	{
	set_pin(0,timer_interrupt_mask);
 1ec:	27 b7       	in	r18, 0x37	; 55
 1ee:	21 60       	ori	r18, 0x01	; 1
 1f0:	27 bf       	out	0x37, r18	; 55
	interrupt_overflow = j->fun_ptr;
 1f2:	81 81       	ldd	r24, Z+1	; 0x01
 1f4:	92 81       	ldd	r25, Z+2	; 0x02
 1f6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 1fa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 1fe:	08 95       	ret
	}
	else if (j->INTERRUPT_ENABLE==OUTPUT_CAPTURE_INTERRUPT)
 200:	21 30       	cpi	r18, 0x01	; 1
 202:	51 f4       	brne	.+20     	; 0x218 <interrupt_timers+0x34>
	{
	set_pin(1,timer_interrupt_mask);
 204:	27 b7       	in	r18, 0x37	; 55
 206:	22 60       	ori	r18, 0x02	; 2
 208:	27 bf       	out	0x37, r18	; 55
	inrterrupt_output_capture = j->fun_ptr;
 20a:	fc 01       	movw	r30, r24
 20c:	81 81       	ldd	r24, Z+1	; 0x01
 20e:	92 81       	ldd	r25, Z+2	; 0x02
 210:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <inrterrupt_output_capture+0x1>
 214:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <inrterrupt_output_capture>
 218:	08 95       	ret

0000021a <__vector_11>:
}
}



ISR(TIMER0_OVF_vect){
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	2f 93       	push	r18
 226:	3f 93       	push	r19
 228:	4f 93       	push	r20
 22a:	5f 93       	push	r21
 22c:	6f 93       	push	r22
 22e:	7f 93       	push	r23
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	af 93       	push	r26
 236:	bf 93       	push	r27
 238:	ef 93       	push	r30
 23a:	ff 93       	push	r31
	
	(*interrupt_overflow)();
 23c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
 240:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <_edata+0x1>
 244:	09 95       	icall
	
}
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	bf 91       	pop	r27
 24c:	af 91       	pop	r26
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	7f 91       	pop	r23
 254:	6f 91       	pop	r22
 256:	5f 91       	pop	r21
 258:	4f 91       	pop	r20
 25a:	3f 91       	pop	r19
 25c:	2f 91       	pop	r18
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <__vector_10>:

ISR(TIMER0_COMP_vect){
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	2f 93       	push	r18
 274:	3f 93       	push	r19
 276:	4f 93       	push	r20
 278:	5f 93       	push	r21
 27a:	6f 93       	push	r22
 27c:	7f 93       	push	r23
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
 282:	af 93       	push	r26
 284:	bf 93       	push	r27
 286:	ef 93       	push	r30
 288:	ff 93       	push	r31
	
	(*inrterrupt_output_capture)();
 28a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <inrterrupt_output_capture>
 28e:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <inrterrupt_output_capture+0x1>
 292:	09 95       	icall
}
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	bf 91       	pop	r27
 29a:	af 91       	pop	r26
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	7f 91       	pop	r23
 2a2:	6f 91       	pop	r22
 2a4:	5f 91       	pop	r21
 2a6:	4f 91       	pop	r20
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
